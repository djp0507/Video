package com.video.newqu.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOAD_VIDEO_INFO".
*/
public class UploadVideoInfoDao extends AbstractDao<UploadVideoInfo, Long> {

    public static final String TABLENAME = "UPLOAD_VIDEO_INFO";

    /**
     * Properties of entity UploadVideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UploadProgress = new Property(1, int.class, "uploadProgress", false, "UPLOAD_PROGRESS");
        public final static Property VideoCoverFps = new Property(2, long.class, "videoCoverFps", false, "VIDEO_COVER_FPS");
        public final static Property VideoFps = new Property(3, float.class, "videoFps", false, "VIDEO_FPS");
        public final static Property UploadType = new Property(4, int.class, "uploadType", false, "UPLOAD_TYPE");
        public final static Property IsPrivate = new Property(5, boolean.class, "isPrivate", false, "IS_PRIVATE");
        public final static Property VideoWidth = new Property(6, int.class, "videoWidth", false, "VIDEO_WIDTH");
        public final static Property VideoHeight = new Property(7, int.class, "videoHeight", false, "VIDEO_HEIGHT");
        public final static Property VideoBitrate = new Property(8, int.class, "videoBitrate", false, "VIDEO_BITRATE");
        public final static Property VideoDurtion = new Property(9, int.class, "videoDurtion", false, "VIDEO_DURTION");
        public final static Property SourceType = new Property(10, int.class, "sourceType", false, "SOURCE_TYPE");
        public final static Property ItemType = new Property(11, int.class, "itemType", false, "ITEM_TYPE");
        public final static Property ComposeState = new Property(12, int.class, "composeState", false, "COMPOSE_STATE");
        public final static Property ComposeProgress = new Property(13, int.class, "composeProgress", false, "COMPOSE_PROGRESS");
        public final static Property VideoName = new Property(14, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property VideoFileKey = new Property(15, String.class, "videoFileKey", false, "VIDEO_FILE_KEY");
        public final static Property FilePath = new Property(16, String.class, "filePath", false, "FILE_PATH");
        public final static Property VideoDesp = new Property(17, String.class, "videoDesp", false, "VIDEO_DESP");
        public final static Property UploadID = new Property(18, String.class, "uploadID", false, "UPLOAD_ID");
        public final static Property MusicPath = new Property(19, String.class, "musicPath", false, "MUSIC_PATH");
        public final static Property MusicID = new Property(20, String.class, "musicID", false, "MUSIC_ID");
        public final static Property CompostOutFilePath = new Property(21, String.class, "compostOutFilePath", false, "COMPOST_OUT_FILE_PATH");
        public final static Property ResoucePath = new Property(22, String.class, "resoucePath", false, "RESOUCE_PATH");
        public final static Property ServiceCallBackBody = new Property(23, String.class, "serviceCallBackBody", false, "SERVICE_CALL_BACK_BODY");
        public final static Property ServiceVideoId = new Property(24, String.class, "serviceVideoId", false, "SERVICE_VIDEO_ID");
        public final static Property DownloadPermiss = new Property(25, String.class, "downloadPermiss", false, "DOWNLOAD_PERMISS");
    }


    public UploadVideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UploadVideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD_VIDEO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UPLOAD_PROGRESS\" INTEGER NOT NULL ," + // 1: uploadProgress
                "\"VIDEO_COVER_FPS\" INTEGER NOT NULL ," + // 2: videoCoverFps
                "\"VIDEO_FPS\" REAL NOT NULL ," + // 3: videoFps
                "\"UPLOAD_TYPE\" INTEGER NOT NULL ," + // 4: uploadType
                "\"IS_PRIVATE\" INTEGER NOT NULL ," + // 5: isPrivate
                "\"VIDEO_WIDTH\" INTEGER NOT NULL ," + // 6: videoWidth
                "\"VIDEO_HEIGHT\" INTEGER NOT NULL ," + // 7: videoHeight
                "\"VIDEO_BITRATE\" INTEGER NOT NULL ," + // 8: videoBitrate
                "\"VIDEO_DURTION\" INTEGER NOT NULL ," + // 9: videoDurtion
                "\"SOURCE_TYPE\" INTEGER NOT NULL ," + // 10: sourceType
                "\"ITEM_TYPE\" INTEGER NOT NULL ," + // 11: itemType
                "\"COMPOSE_STATE\" INTEGER NOT NULL ," + // 12: composeState
                "\"COMPOSE_PROGRESS\" INTEGER NOT NULL ," + // 13: composeProgress
                "\"VIDEO_NAME\" TEXT," + // 14: videoName
                "\"VIDEO_FILE_KEY\" TEXT," + // 15: videoFileKey
                "\"FILE_PATH\" TEXT," + // 16: filePath
                "\"VIDEO_DESP\" TEXT," + // 17: videoDesp
                "\"UPLOAD_ID\" TEXT," + // 18: uploadID
                "\"MUSIC_PATH\" TEXT," + // 19: musicPath
                "\"MUSIC_ID\" TEXT," + // 20: musicID
                "\"COMPOST_OUT_FILE_PATH\" TEXT," + // 21: compostOutFilePath
                "\"RESOUCE_PATH\" TEXT," + // 22: resoucePath
                "\"SERVICE_CALL_BACK_BODY\" TEXT," + // 23: serviceCallBackBody
                "\"SERVICE_VIDEO_ID\" TEXT," + // 24: serviceVideoId
                "\"DOWNLOAD_PERMISS\" TEXT);"); // 25: downloadPermiss
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD_VIDEO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UploadVideoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUploadProgress());
        stmt.bindLong(3, entity.getVideoCoverFps());
        stmt.bindDouble(4, entity.getVideoFps());
        stmt.bindLong(5, entity.getUploadType());
        stmt.bindLong(6, entity.getIsPrivate() ? 1L: 0L);
        stmt.bindLong(7, entity.getVideoWidth());
        stmt.bindLong(8, entity.getVideoHeight());
        stmt.bindLong(9, entity.getVideoBitrate());
        stmt.bindLong(10, entity.getVideoDurtion());
        stmt.bindLong(11, entity.getSourceType());
        stmt.bindLong(12, entity.getItemType());
        stmt.bindLong(13, entity.getComposeState());
        stmt.bindLong(14, entity.getComposeProgress());
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(15, videoName);
        }
 
        String videoFileKey = entity.getVideoFileKey();
        if (videoFileKey != null) {
            stmt.bindString(16, videoFileKey);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(17, filePath);
        }
 
        String videoDesp = entity.getVideoDesp();
        if (videoDesp != null) {
            stmt.bindString(18, videoDesp);
        }
 
        String uploadID = entity.getUploadID();
        if (uploadID != null) {
            stmt.bindString(19, uploadID);
        }
 
        String musicPath = entity.getMusicPath();
        if (musicPath != null) {
            stmt.bindString(20, musicPath);
        }
 
        String musicID = entity.getMusicID();
        if (musicID != null) {
            stmt.bindString(21, musicID);
        }
 
        String compostOutFilePath = entity.getCompostOutFilePath();
        if (compostOutFilePath != null) {
            stmt.bindString(22, compostOutFilePath);
        }
 
        String resoucePath = entity.getResoucePath();
        if (resoucePath != null) {
            stmt.bindString(23, resoucePath);
        }
 
        String serviceCallBackBody = entity.getServiceCallBackBody();
        if (serviceCallBackBody != null) {
            stmt.bindString(24, serviceCallBackBody);
        }
 
        String serviceVideoId = entity.getServiceVideoId();
        if (serviceVideoId != null) {
            stmt.bindString(25, serviceVideoId);
        }
 
        String downloadPermiss = entity.getDownloadPermiss();
        if (downloadPermiss != null) {
            stmt.bindString(26, downloadPermiss);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UploadVideoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUploadProgress());
        stmt.bindLong(3, entity.getVideoCoverFps());
        stmt.bindDouble(4, entity.getVideoFps());
        stmt.bindLong(5, entity.getUploadType());
        stmt.bindLong(6, entity.getIsPrivate() ? 1L: 0L);
        stmt.bindLong(7, entity.getVideoWidth());
        stmt.bindLong(8, entity.getVideoHeight());
        stmt.bindLong(9, entity.getVideoBitrate());
        stmt.bindLong(10, entity.getVideoDurtion());
        stmt.bindLong(11, entity.getSourceType());
        stmt.bindLong(12, entity.getItemType());
        stmt.bindLong(13, entity.getComposeState());
        stmt.bindLong(14, entity.getComposeProgress());
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(15, videoName);
        }
 
        String videoFileKey = entity.getVideoFileKey();
        if (videoFileKey != null) {
            stmt.bindString(16, videoFileKey);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(17, filePath);
        }
 
        String videoDesp = entity.getVideoDesp();
        if (videoDesp != null) {
            stmt.bindString(18, videoDesp);
        }
 
        String uploadID = entity.getUploadID();
        if (uploadID != null) {
            stmt.bindString(19, uploadID);
        }
 
        String musicPath = entity.getMusicPath();
        if (musicPath != null) {
            stmt.bindString(20, musicPath);
        }
 
        String musicID = entity.getMusicID();
        if (musicID != null) {
            stmt.bindString(21, musicID);
        }
 
        String compostOutFilePath = entity.getCompostOutFilePath();
        if (compostOutFilePath != null) {
            stmt.bindString(22, compostOutFilePath);
        }
 
        String resoucePath = entity.getResoucePath();
        if (resoucePath != null) {
            stmt.bindString(23, resoucePath);
        }
 
        String serviceCallBackBody = entity.getServiceCallBackBody();
        if (serviceCallBackBody != null) {
            stmt.bindString(24, serviceCallBackBody);
        }
 
        String serviceVideoId = entity.getServiceVideoId();
        if (serviceVideoId != null) {
            stmt.bindString(25, serviceVideoId);
        }
 
        String downloadPermiss = entity.getDownloadPermiss();
        if (downloadPermiss != null) {
            stmt.bindString(26, downloadPermiss);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UploadVideoInfo readEntity(Cursor cursor, int offset) {
        UploadVideoInfo entity = new UploadVideoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // uploadProgress
            cursor.getLong(offset + 2), // videoCoverFps
            cursor.getFloat(offset + 3), // videoFps
            cursor.getInt(offset + 4), // uploadType
            cursor.getShort(offset + 5) != 0, // isPrivate
            cursor.getInt(offset + 6), // videoWidth
            cursor.getInt(offset + 7), // videoHeight
            cursor.getInt(offset + 8), // videoBitrate
            cursor.getInt(offset + 9), // videoDurtion
            cursor.getInt(offset + 10), // sourceType
            cursor.getInt(offset + 11), // itemType
            cursor.getInt(offset + 12), // composeState
            cursor.getInt(offset + 13), // composeProgress
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // videoName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // videoFileKey
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // filePath
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // videoDesp
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // uploadID
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // musicPath
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // musicID
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // compostOutFilePath
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // resoucePath
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // serviceCallBackBody
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // serviceVideoId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // downloadPermiss
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UploadVideoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUploadProgress(cursor.getInt(offset + 1));
        entity.setVideoCoverFps(cursor.getLong(offset + 2));
        entity.setVideoFps(cursor.getFloat(offset + 3));
        entity.setUploadType(cursor.getInt(offset + 4));
        entity.setIsPrivate(cursor.getShort(offset + 5) != 0);
        entity.setVideoWidth(cursor.getInt(offset + 6));
        entity.setVideoHeight(cursor.getInt(offset + 7));
        entity.setVideoBitrate(cursor.getInt(offset + 8));
        entity.setVideoDurtion(cursor.getInt(offset + 9));
        entity.setSourceType(cursor.getInt(offset + 10));
        entity.setItemType(cursor.getInt(offset + 11));
        entity.setComposeState(cursor.getInt(offset + 12));
        entity.setComposeProgress(cursor.getInt(offset + 13));
        entity.setVideoName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVideoFileKey(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFilePath(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVideoDesp(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUploadID(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMusicPath(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMusicID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCompostOutFilePath(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setResoucePath(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setServiceCallBackBody(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setServiceVideoId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDownloadPermiss(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UploadVideoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UploadVideoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UploadVideoInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
