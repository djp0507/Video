package com.video.newqu.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEI_CHACT_VIDEO_INFO".
*/
public class WeiChactVideoInfoDao extends AbstractDao<WeiChactVideoInfo, Long> {

    public static final String TABLENAME = "WEI_CHACT_VIDEO_INFO";

    /**
     * Properties of entity WeiChactVideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property IsUploadFinlish = new Property(2, boolean.class, "isUploadFinlish", false, "IS_UPLOAD_FINLISH");
        public final static Property FileKey = new Property(3, String.class, "fileKey", false, "FILE_KEY");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FILE_NAME");
        public final static Property Video_width = new Property(5, String.class, "video_width", false, "VIDEO_WIDTH");
        public final static Property Video_height = new Property(6, String.class, "video_height", false, "VIDEO_HEIGHT");
        public final static Property Frame_num = new Property(7, String.class, "frame_num", false, "FRAME_NUM");
        public final static Property Code_rate = new Property(8, String.class, "code_rate", false, "CODE_RATE");
        public final static Property Video_durtion = new Property(9, String.class, "video_durtion", false, "VIDEO_DURTION");
        public final static Property SourceType = new Property(10, int.class, "sourceType", false, "SOURCE_TYPE");
        public final static Property UploadID = new Property(11, String.class, "uploadID", false, "UPLOAD_ID");
    }


    public WeiChactVideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WeiChactVideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEI_CHACT_VIDEO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"FILE_PATH\" TEXT," + // 1: filePath
                "\"IS_UPLOAD_FINLISH\" INTEGER NOT NULL ," + // 2: isUploadFinlish
                "\"FILE_KEY\" TEXT," + // 3: fileKey
                "\"FILE_NAME\" TEXT," + // 4: fileName
                "\"VIDEO_WIDTH\" TEXT," + // 5: video_width
                "\"VIDEO_HEIGHT\" TEXT," + // 6: video_height
                "\"FRAME_NUM\" TEXT," + // 7: frame_num
                "\"CODE_RATE\" TEXT," + // 8: code_rate
                "\"VIDEO_DURTION\" TEXT," + // 9: video_durtion
                "\"SOURCE_TYPE\" INTEGER NOT NULL ," + // 10: sourceType
                "\"UPLOAD_ID\" TEXT);"); // 11: uploadID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEI_CHACT_VIDEO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeiChactVideoInfo entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
        stmt.bindLong(3, entity.getIsUploadFinlish() ? 1L: 0L);
 
        String fileKey = entity.getFileKey();
        if (fileKey != null) {
            stmt.bindString(4, fileKey);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
 
        String video_width = entity.getVideo_width();
        if (video_width != null) {
            stmt.bindString(6, video_width);
        }
 
        String video_height = entity.getVideo_height();
        if (video_height != null) {
            stmt.bindString(7, video_height);
        }
 
        String frame_num = entity.getFrame_num();
        if (frame_num != null) {
            stmt.bindString(8, frame_num);
        }
 
        String code_rate = entity.getCode_rate();
        if (code_rate != null) {
            stmt.bindString(9, code_rate);
        }
 
        String video_durtion = entity.getVideo_durtion();
        if (video_durtion != null) {
            stmt.bindString(10, video_durtion);
        }
        stmt.bindLong(11, entity.getSourceType());
 
        String uploadID = entity.getUploadID();
        if (uploadID != null) {
            stmt.bindString(12, uploadID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeiChactVideoInfo entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
        stmt.bindLong(3, entity.getIsUploadFinlish() ? 1L: 0L);
 
        String fileKey = entity.getFileKey();
        if (fileKey != null) {
            stmt.bindString(4, fileKey);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
 
        String video_width = entity.getVideo_width();
        if (video_width != null) {
            stmt.bindString(6, video_width);
        }
 
        String video_height = entity.getVideo_height();
        if (video_height != null) {
            stmt.bindString(7, video_height);
        }
 
        String frame_num = entity.getFrame_num();
        if (frame_num != null) {
            stmt.bindString(8, frame_num);
        }
 
        String code_rate = entity.getCode_rate();
        if (code_rate != null) {
            stmt.bindString(9, code_rate);
        }
 
        String video_durtion = entity.getVideo_durtion();
        if (video_durtion != null) {
            stmt.bindString(10, video_durtion);
        }
        stmt.bindLong(11, entity.getSourceType());
 
        String uploadID = entity.getUploadID();
        if (uploadID != null) {
            stmt.bindString(12, uploadID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WeiChactVideoInfo readEntity(Cursor cursor, int offset) {
        WeiChactVideoInfo entity = new WeiChactVideoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filePath
            cursor.getShort(offset + 2) != 0, // isUploadFinlish
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // video_width
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // video_height
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // frame_num
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // code_rate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // video_durtion
            cursor.getInt(offset + 10), // sourceType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // uploadID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeiChactVideoInfo entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsUploadFinlish(cursor.getShort(offset + 2) != 0);
        entity.setFileKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideo_width(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideo_height(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFrame_num(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCode_rate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVideo_durtion(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSourceType(cursor.getInt(offset + 10));
        entity.setUploadID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeiChactVideoInfo entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeiChactVideoInfo entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeiChactVideoInfo entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
