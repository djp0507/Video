package com.video.newqu.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_LIST_INFO".
*/
public class MessageListInfoDao extends AbstractDao<MessageListInfo, Long> {

    public static final String TABLENAME = "MESSAGE_LIST_INFO";

    /**
     * Properties of entity MessageListInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Add_time = new Property(1, Long.class, "add_time", false, "ADD_TIME");
        public final static Property Is_follow = new Property(2, int.class, "is_follow", false, "IS_FOLLOW");
        public final static Property ItemType = new Property(3, int.class, "itemType", false, "ITEM_TYPE");
        public final static Property Logo = new Property(4, String.class, "logo", false, "LOGO");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property User_id = new Property(7, String.class, "user_id", false, "USER_ID");
        public final static Property Comment = new Property(8, String.class, "comment", false, "COMMENT");
        public final static Property Cover = new Property(9, String.class, "cover", false, "COVER");
        public final static Property Desp = new Property(10, String.class, "desp", false, "DESP");
        public final static Property Video_id = new Property(11, String.class, "video_id", false, "VIDEO_ID");
        public final static Property From_nickname = new Property(12, String.class, "from_nickname", false, "FROM_NICKNAME");
        public final static Property IsRead = new Property(13, boolean.class, "isRead", false, "IS_READ");
    }


    public MessageListInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MessageListInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_LIST_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADD_TIME\" INTEGER," + // 1: add_time
                "\"IS_FOLLOW\" INTEGER NOT NULL ," + // 2: is_follow
                "\"ITEM_TYPE\" INTEGER NOT NULL ," + // 3: itemType
                "\"LOGO\" TEXT," + // 4: logo
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"TYPE\" TEXT," + // 6: type
                "\"USER_ID\" TEXT," + // 7: user_id
                "\"COMMENT\" TEXT," + // 8: comment
                "\"COVER\" TEXT," + // 9: cover
                "\"DESP\" TEXT," + // 10: desp
                "\"VIDEO_ID\" TEXT," + // 11: video_id
                "\"FROM_NICKNAME\" TEXT," + // 12: from_nickname
                "\"IS_READ\" INTEGER NOT NULL );"); // 13: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_LIST_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageListInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindLong(2, add_time);
        }
        stmt.bindLong(3, entity.getIs_follow());
        stmt.bindLong(4, entity.getItemType());
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(8, user_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(9, comment);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(10, cover);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(11, desp);
        }
 
        String video_id = entity.getVideo_id();
        if (video_id != null) {
            stmt.bindString(12, video_id);
        }
 
        String from_nickname = entity.getFrom_nickname();
        if (from_nickname != null) {
            stmt.bindString(13, from_nickname);
        }
        stmt.bindLong(14, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageListInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindLong(2, add_time);
        }
        stmt.bindLong(3, entity.getIs_follow());
        stmt.bindLong(4, entity.getItemType());
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(8, user_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(9, comment);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(10, cover);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(11, desp);
        }
 
        String video_id = entity.getVideo_id();
        if (video_id != null) {
            stmt.bindString(12, video_id);
        }
 
        String from_nickname = entity.getFrom_nickname();
        if (from_nickname != null) {
            stmt.bindString(13, from_nickname);
        }
        stmt.bindLong(14, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageListInfo readEntity(Cursor cursor, int offset) {
        MessageListInfo entity = new MessageListInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // add_time
            cursor.getInt(offset + 2), // is_follow
            cursor.getInt(offset + 3), // itemType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // logo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // comment
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cover
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // desp
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // video_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // from_nickname
            cursor.getShort(offset + 13) != 0 // isRead
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageListInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdd_time(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIs_follow(cursor.getInt(offset + 2));
        entity.setItemType(cursor.getInt(offset + 3));
        entity.setLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setComment(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCover(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDesp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVideo_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFrom_nickname(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsRead(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageListInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageListInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageListInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
