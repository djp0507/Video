package com.video.newqu.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_PLAYER_VIDEO_HISTORY_LIST".
*/
public class UserPlayerVideoHistoryListDao extends AbstractDao<UserPlayerVideoHistoryList, Long> {

    public static final String TABLENAME = "USER_PLAYER_VIDEO_HISTORY_LIST";

    /**
     * Properties of entity UserPlayerVideoHistoryList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserSinger = new Property(3, String.class, "userSinger", false, "USER_SINGER");
        public final static Property UserCover = new Property(4, String.class, "userCover", false, "USER_COVER");
        public final static Property VideoDesp = new Property(5, String.class, "videoDesp", false, "VIDEO_DESP");
        public final static Property VideoLikeCount = new Property(6, String.class, "videoLikeCount", false, "VIDEO_LIKE_COUNT");
        public final static Property VideoCommendCount = new Property(7, String.class, "videoCommendCount", false, "VIDEO_COMMEND_COUNT");
        public final static Property VideoShareCount = new Property(8, String.class, "videoShareCount", false, "VIDEO_SHARE_COUNT");
        public final static Property UserId = new Property(9, String.class, "userId", false, "USER_ID");
        public final static Property VideoId = new Property(10, String.class, "videoId", false, "VIDEO_ID");
        public final static Property VideoCover = new Property(11, String.class, "videoCover", false, "VIDEO_COVER");
        public final static Property IsSelector = new Property(12, boolean.class, "isSelector", false, "IS_SELECTOR");
        public final static Property UploadTime = new Property(13, String.class, "uploadTime", false, "UPLOAD_TIME");
        public final static Property AddTime = new Property(14, long.class, "addTime", false, "ADD_TIME");
        public final static Property Is_interest = new Property(15, int.class, "is_interest", false, "IS_INTEREST");
        public final static Property Is_follow = new Property(16, int.class, "is_follow", false, "IS_FOLLOW");
        public final static Property VideoPath = new Property(17, String.class, "videoPath", false, "VIDEO_PATH");
        public final static Property VideoPlayerCount = new Property(18, String.class, "videoPlayerCount", false, "VIDEO_PLAYER_COUNT");
        public final static Property VideoType = new Property(19, String.class, "videoType", false, "VIDEO_TYPE");
        public final static Property DownloadPermiss = new Property(20, String.class, "downloadPermiss", false, "DOWNLOAD_PERMISS");
    }


    public UserPlayerVideoHistoryListDao(DaoConfig config) {
        super(config);
    }
    
    public UserPlayerVideoHistoryListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_PLAYER_VIDEO_HISTORY_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"USER_SINGER\" TEXT," + // 3: userSinger
                "\"USER_COVER\" TEXT," + // 4: userCover
                "\"VIDEO_DESP\" TEXT," + // 5: videoDesp
                "\"VIDEO_LIKE_COUNT\" TEXT," + // 6: videoLikeCount
                "\"VIDEO_COMMEND_COUNT\" TEXT," + // 7: videoCommendCount
                "\"VIDEO_SHARE_COUNT\" TEXT," + // 8: videoShareCount
                "\"USER_ID\" TEXT," + // 9: userId
                "\"VIDEO_ID\" TEXT," + // 10: videoId
                "\"VIDEO_COVER\" TEXT," + // 11: videoCover
                "\"IS_SELECTOR\" INTEGER NOT NULL ," + // 12: isSelector
                "\"UPLOAD_TIME\" TEXT," + // 13: uploadTime
                "\"ADD_TIME\" INTEGER NOT NULL ," + // 14: addTime
                "\"IS_INTEREST\" INTEGER NOT NULL ," + // 15: is_interest
                "\"IS_FOLLOW\" INTEGER NOT NULL ," + // 16: is_follow
                "\"VIDEO_PATH\" TEXT," + // 17: videoPath
                "\"VIDEO_PLAYER_COUNT\" TEXT," + // 18: videoPlayerCount
                "\"VIDEO_TYPE\" TEXT," + // 19: videoType
                "\"DOWNLOAD_PERMISS\" TEXT);"); // 20: downloadPermiss
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_PLAYER_VIDEO_HISTORY_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserPlayerVideoHistoryList entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userSinger = entity.getUserSinger();
        if (userSinger != null) {
            stmt.bindString(4, userSinger);
        }
 
        String userCover = entity.getUserCover();
        if (userCover != null) {
            stmt.bindString(5, userCover);
        }
 
        String videoDesp = entity.getVideoDesp();
        if (videoDesp != null) {
            stmt.bindString(6, videoDesp);
        }
 
        String videoLikeCount = entity.getVideoLikeCount();
        if (videoLikeCount != null) {
            stmt.bindString(7, videoLikeCount);
        }
 
        String videoCommendCount = entity.getVideoCommendCount();
        if (videoCommendCount != null) {
            stmt.bindString(8, videoCommendCount);
        }
 
        String videoShareCount = entity.getVideoShareCount();
        if (videoShareCount != null) {
            stmt.bindString(9, videoShareCount);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(11, videoId);
        }
 
        String videoCover = entity.getVideoCover();
        if (videoCover != null) {
            stmt.bindString(12, videoCover);
        }
        stmt.bindLong(13, entity.getIsSelector() ? 1L: 0L);
 
        String uploadTime = entity.getUploadTime();
        if (uploadTime != null) {
            stmt.bindString(14, uploadTime);
        }
        stmt.bindLong(15, entity.getAddTime());
        stmt.bindLong(16, entity.getIs_interest());
        stmt.bindLong(17, entity.getIs_follow());
 
        String videoPath = entity.getVideoPath();
        if (videoPath != null) {
            stmt.bindString(18, videoPath);
        }
 
        String videoPlayerCount = entity.getVideoPlayerCount();
        if (videoPlayerCount != null) {
            stmt.bindString(19, videoPlayerCount);
        }
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(20, videoType);
        }
 
        String downloadPermiss = entity.getDownloadPermiss();
        if (downloadPermiss != null) {
            stmt.bindString(21, downloadPermiss);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserPlayerVideoHistoryList entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userSinger = entity.getUserSinger();
        if (userSinger != null) {
            stmt.bindString(4, userSinger);
        }
 
        String userCover = entity.getUserCover();
        if (userCover != null) {
            stmt.bindString(5, userCover);
        }
 
        String videoDesp = entity.getVideoDesp();
        if (videoDesp != null) {
            stmt.bindString(6, videoDesp);
        }
 
        String videoLikeCount = entity.getVideoLikeCount();
        if (videoLikeCount != null) {
            stmt.bindString(7, videoLikeCount);
        }
 
        String videoCommendCount = entity.getVideoCommendCount();
        if (videoCommendCount != null) {
            stmt.bindString(8, videoCommendCount);
        }
 
        String videoShareCount = entity.getVideoShareCount();
        if (videoShareCount != null) {
            stmt.bindString(9, videoShareCount);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(11, videoId);
        }
 
        String videoCover = entity.getVideoCover();
        if (videoCover != null) {
            stmt.bindString(12, videoCover);
        }
        stmt.bindLong(13, entity.getIsSelector() ? 1L: 0L);
 
        String uploadTime = entity.getUploadTime();
        if (uploadTime != null) {
            stmt.bindString(14, uploadTime);
        }
        stmt.bindLong(15, entity.getAddTime());
        stmt.bindLong(16, entity.getIs_interest());
        stmt.bindLong(17, entity.getIs_follow());
 
        String videoPath = entity.getVideoPath();
        if (videoPath != null) {
            stmt.bindString(18, videoPath);
        }
 
        String videoPlayerCount = entity.getVideoPlayerCount();
        if (videoPlayerCount != null) {
            stmt.bindString(19, videoPlayerCount);
        }
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(20, videoType);
        }
 
        String downloadPermiss = entity.getDownloadPermiss();
        if (downloadPermiss != null) {
            stmt.bindString(21, downloadPermiss);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserPlayerVideoHistoryList readEntity(Cursor cursor, int offset) {
        UserPlayerVideoHistoryList entity = new UserPlayerVideoHistoryList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userSinger
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userCover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoDesp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // videoLikeCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // videoCommendCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // videoShareCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // videoId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // videoCover
            cursor.getShort(offset + 12) != 0, // isSelector
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // uploadTime
            cursor.getLong(offset + 14), // addTime
            cursor.getInt(offset + 15), // is_interest
            cursor.getInt(offset + 16), // is_follow
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // videoPath
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // videoPlayerCount
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // videoType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // downloadPermiss
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserPlayerVideoHistoryList entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserSinger(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoDesp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideoLikeCount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideoCommendCount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVideoShareCount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVideoId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVideoCover(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsSelector(cursor.getShort(offset + 12) != 0);
        entity.setUploadTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAddTime(cursor.getLong(offset + 14));
        entity.setIs_interest(cursor.getInt(offset + 15));
        entity.setIs_follow(cursor.getInt(offset + 16));
        entity.setVideoPath(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setVideoPlayerCount(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setVideoType(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDownloadPermiss(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserPlayerVideoHistoryList entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserPlayerVideoHistoryList entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserPlayerVideoHistoryList entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
